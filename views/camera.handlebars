<!-- /. NAV SIDE  -->
<nav class="navbar-default navbar-side" role="navigation">
    <div class="sidebar-collapse">
        <ul class="nav" id="main-menu">

            <li>
                <a href="home"><i class="fa fa-dashboard"></i> Dashboard</a>
            </li>
            <li>
                <a href="control"><i class="fa fa-list-alt"></i> Control</a>
            </li>
            <li>
                <a href="scenes"><i class="fa fa-picture-o"></i> Scenes</a>
            </li>
            <li>
                <a href="chart"><i class="fa fa-bar-chart-o"></i> Charts</a>
            </li>
            <li>
                <a class="active-menu"><i class="fa fa-camera"></i> Outdoor Camera</a>
            </li>
            <li>
                <a href="motion"><i class="fa fa-video-camera"></i> Indoor Camera</a>
            </li>
            <li>
                <a href="chat"><i class="fa fa-edit"></i> Chat </a>
            </li>
            <li>
                <a href="gps"><i class="fa fa-map-marker"></i> Member Tracker</a>
            </li>
        </ul>
    </div>
</nav>

<!-- put this before page inner (body) to load every scripts before body -->

<script src="dist/face-api.js"></script>
<script src="commonsForFaceApi.js"></script>

<!-- /. PAGE WRAPPER  -->
<div id="page-wrapper" >
    <div id="page-inner">
        <style>
            video, canvas {
                position: absolute;
            }
            div.box{
                position: relative;
                text-align: center;
                width: 100px;
                height: 60px;
                margin: 20px auto 10px auto;
            }
            div.box .letterInsideButtonState3 {
                display: block;
                position: absolute;
                font-size: 26px;
                top: 18px;
                width: 100px;
                color: {{device3ButtonColor}};
                border: none;
                background-color: white;
            }
        </style>
        <h2> OUTDOOR SECURITY CAMERA</h2>
        <br>
        <div class="col-xs-6 col-md-2">
            <div class="panel panel-default">
                <div class="panel-body easypiechart-panel">
                    <iframe name="hiddenFrame" width="0" height="0" border="0" style="display: none;"></iframe>
                    <form action = "/device3", method = "post", target = "hiddenFrame">
                        <h4> Main Door </h4>
                        <div class="box">
                            <button type="submit" class="letterInsideButtonState3" id = "device3">{{device3state}}</button>
                        </div>
                    </form>
                </div>
            </div>

            <video onplay="onPlay(this)" id="inputVideo" autoplay muted></video>
            <canvas id="overlay"></canvas>


    </div>
</div>

<!-- put this func after body to load it right after every content on page loaded -->
<script>
    const MODEL_URL = '/weights';

    let modelLoaded = false
    let minFaceSize = 150                                              //keep a safe distance from face to webcam. If not, overflow bug would appear sooner
    let maxDistance = 0.51
    let minConfidence = 0.9

    async function onPlay(videoEl) {
        if(videoEl.paused || videoEl.ended || !modelLoaded)
            return false

        const { width, height } = faceapi.getMediaDimensions(videoEl)
        const canvas = $('#overlay').get(0)
        canvas.width = width
        canvas.height = height


    const mtcnnParams = {
        minFaceSize
    }

    const fullFaceDescriptions = (await faceapi.allFacesMtcnn(videoEl, mtcnnParams))
            .map(fd => fd.forSize(width, height))

        //temporary fix bug read distance property of undefined
        try {

            //declare const bestMatch first for global use
            var bestMatch, text;

            function detectFace() {
                fullFaceDescriptions.forEach(({detection, descriptor}) => {
                    faceapi.drawDetection('overlay', [detection], {withScore: false})
                    //faceapi.drawLandmarks('overlay', landmarks.forSize(width, height), { lineWidth: 4, color: 'red' })
                    bestMatch = getBestMatch(trainDescriptorsByClass, descriptor)
                    text = `${bestMatch.distance < maxDistance ? bestMatch.className : 'Just a HOOMAN'} (${bestMatch.distance})`
                    const {x, y, height: boxHeight} = detection.getBox()
                    faceapi.drawText(
                            canvas.getContext('2d'),
                            x,
                            y + boxHeight,
                            text,
                            Object.assign(faceapi.getDefaultDrawOptions(), {color: 'red', fontSize: 16})
                    )
                })                                                              //fullFaceDescriptions.forEach brackets
            }

            //start function opendoor
            function doorSwitcher() {
                detectFace()
                if (bestMatch.distance < maxDistance) {
                    $.ajax({
                        url: "./device3",
                        type: "POST",
                        dataType: 'JSON',
                        success: function (result) {
                            result.device3 = "on"
                        }
                    })
                }
            }

            /*
            if (bestMatch.distance >= maxDistance) {
                $.ajax({
                    url: "./device3",
                    type: 'POST',
                    //data: JSON.stringify(deviceState),
                    dataType: 'JSON',
                    success: function (result) {
                        result.device3 = "off";
                        $("#device3").text("CLOSED");
                        $("#device3").css("color", "red");
                    }
                })
            }
    */
            /*
    setInterval(function () {
            if ( ) {
                $.ajax({
                    url: "./state",
                    dataType: 'JSON',
                    success: function () {
                        deviceState.device3 = "on"
                        $("#device3").text("OPEN");
                        $("#device3").css("color", "blue");
                    }
                })
                //delay(3000)
            }
            else {
                $.ajax({
                    url: "./state",
                    dataType: 'JSON',
                    success: function () {
                        deviceState.device3 = "off"
                        $("#device3").text("CLOSED");
                        $("#device3").css("color", "red");
                    }
                })
            }
            //delay(5000)
        }, 10000)
        */

            doorSwitcher()
        }
        catch (e) {
            console.log(e);
        }
        setTimeout(() => onPlay(videoEl))
    }

    async function run() {
        await faceapi.loadMtcnnModel(MODEL_URL)
        await faceapi.loadFaceRecognitionModel(MODEL_URL)

        // init reference data, e.g. compute a face descriptor for each class
        trainDescriptorsByClass = await initTrainDescriptorsByClass(faceapi.recognitionNet)

        modelLoaded = true

        // try to access users webcam and stream the images
        // to the video element
        const videoEl = $('#inputVideo').get(0)
        navigator.getUserMedia(
                { video: {} },
                stream => videoEl.srcObject = stream,
                err => console.error(err)
        )
    }
/*
    function updateData(){
        $.ajax({
            url: "./state",
            dataType: 'JSON',
            success: function(result){
                if(result.device3 === "on"){
                    $("#device3").text("OPEN");
                    $("#device3").css("color","blue");
                }
                if(result.device3 === "off"){
                    $("#device3").text("CLOSED");
                    $("#device3").css("color","red");
                }
                setTimeout(function(){
                    //updateData()
                }, 2000);
            }
        });
    }
*/
    $(document).ready(function() {
        run()
        //updateData()
    })
</script>


            <!--<iframe id="localVideo" width="650" height="490" ></iframe>
                <video id="localVideo" width="1280" height="720" autoplay></video>
            -->




<!-- Comment in this bracket
<script src="https://webrtc.github.io/adapter/adapter-latest.js"></script>
<script src="webRTC/js/common.js"></script>
<script src="webRTC/js/videopipe.js"></script>
<script src="webRTC/main.js"></script>
<script src="webRTC/js/lib/ga.js"></script> //gg analytic<script>

<script src="../camTracking/build/tracking-min.js"></script>
<script src="../camTracking/build/data/face-min.js"></script>
<script src="../node_modules/dat.gui/build/dat.gui.min.js"></script>
<script src="../camTracking/assets/stats.min.js"></script>
</script>
-->